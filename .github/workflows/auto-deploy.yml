name: Automatic Deploy - MacSSH

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ closed ]

env:
  XCODE_PROJECT: MacSSH.xcodeproj
  XCODE_SCHEME: MacSSH
  XCODE_CONFIGURATION: Release

jobs:
  deploy:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: macos-latest
    permissions:
      contents: write
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          permissions: write

      - name: Get current version
        id: current-version
        run: |
          CURRENT_VERSION=$(grep 'MARKETING_VERSION = ' $XCODE_PROJECT/project.pbxproj | head -1 | sed 's/.*MARKETING_VERSION = \([^;]*\);.*/\1/')
          CURRENT_BUILD=$(grep 'CURRENT_PROJECT_VERSION = ' $XCODE_PROJECT/project.pbxproj | head -1 | sed 's/.*CURRENT_PROJECT_VERSION = \([^;]*\);.*/\1/')
          MAJOR=$(echo "$CURRENT_VERSION" | cut -d. -f1)
          MINOR=$(echo "$CURRENT_VERSION" | cut -d. -f2)
          PATCH=$(echo "$CURRENT_VERSION" | cut -d. -f3)
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          NEW_BUILD=$((CURRENT_BUILD + 1))
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "current_build=$CURRENT_BUILD" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_build=$NEW_BUILD" >> $GITHUB_OUTPUT
          echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest-stable'

      - name: Install dependencies
        run: |
          brew install create-dmg
          brew install xmlstarlet

      - name: Update version in project.pbxproj and Info.plist
        run: |
          # Update project.pbxproj
          sed -i '' "s/MARKETING_VERSION = ${{ steps.current-version.outputs.current_version }}/MARKETING_VERSION = ${{ steps.current-version.outputs.new_version }}/g" $XCODE_PROJECT/project.pbxproj
          sed -i '' "s/CURRENT_PROJECT_VERSION = ${{ steps.current-version.outputs.current_build }}/CURRENT_PROJECT_VERSION = ${{ steps.current-version.outputs.new_build }}/g" $XCODE_PROJECT/project.pbxproj
          
          # Update Info.plist
          # Get current version from Info.plist
          CURRENT_INFO_VERSION=$(grep -A 1 'CFBundleShortVersionString' MacSSH/Info.plist | tail -1 | sed 's/.*<string>\([^<]*\)<\/string>.*/\1/')
          sed -i '' "s/<string>$CURRENT_INFO_VERSION<\/string>/<string>${{ steps.current-version.outputs.new_version }}<\/string>/g" MacSSH/Info.plist

      - name: Build application
        run: |
          xcodebuild -project $XCODE_PROJECT -scheme $XCODE_SCHEME -configuration $XCODE_CONFIGURATION clean build CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO
          BUILD_PATH=$(find ~/Library/Developer/Xcode/DerivedData -name "MacSSH.app" -type d | head -1)
          if [ ! -d "$BUILD_PATH" ]; then
            echo "Build failed - MacSSH.app not found"
            exit 1
          fi

      - name: Create DMG package
        run: |
          DMG_NAME="MacSSH-${{ steps.current-version.outputs.new_version }}.dmg"
          BUILD_PATH=$(find ~/Library/Developer/Xcode/DerivedData -name "MacSSH.app" -type d | head -1)
          create-dmg --volname "MacSSH Installer" --window-pos 200 120 --window-size 800 400 --icon-size 100 --icon "MacSSH.app" 200 190 --hide-extension "MacSSH.app" --app-drop-link 600 185 "$DMG_NAME" "$BUILD_PATH/.."

      - name: Generate release notes
        id: release-notes
        run: |
          RELEASE_NOTES="# MacSSH ${{ steps.current-version.outputs.new_version }} Release Notes"$'\n'$'\n'"## What's New"$'\n'
          RELEASE_NOTES+="- ðŸš€ Automatic release with GitHub Actions"$'\n'
          RELEASE_NOTES+="- ðŸ”§ Improved build process"$'\n'
          RELEASE_NOTES+="- ðŸ“¦ DMG package creation"$'\n'
          RELEASE_NOTES+=$'\n'$'\n'"## Technical Details"$'\n'"- Version: ${{ steps.current-version.outputs.new_version }}"$'\n'"- Build: ${{ steps.current-version.outputs.new_build }}"$'\n'"- Release Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"$'\n'$'\n'"## System Requirements"$'\n'"- macOS 14.0 or later"
          echo "$RELEASE_NOTES" > RELEASE_NOTES.md

      - name: Create GitHub release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          DMG_NAME="MacSSH-${{ steps.current-version.outputs.new_version }}.dmg"
          gh release create "${{ steps.current-version.outputs.tag }}" --title "MacSSH ${{ steps.current-version.outputs.new_version }} - Automatic Release" --notes-file RELEASE_NOTES.md --draft "$DMG_NAME"
          gh release edit "${{ steps.current-version.outputs.tag }}" --draft=false

      - name: Update appcast.xml
        run: |
          DMG_NAME="MacSSH-${{ steps.current-version.outputs.new_version }}.dmg"
          chmod +x update_appcast.sh
          ./update_appcast.sh "${{ steps.current-version.outputs.new_version }}" "${{ steps.current-version.outputs.new_build }}" "$DMG_NAME"





      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add $XCODE_PROJECT/project.pbxproj MacSSH/Info.plist appcast.xml
          git commit -m "Automatic release ${{ steps.current-version.outputs.new_version }} - Update version and appcast"
          git push origin main

      - name: Deployment summary
        run: |
          echo "Automatic deployment completed successfully!"
          echo "Version: ${{ steps.current-version.outputs.new_version }}"
          echo "Build: ${{ steps.current-version.outputs.new_build }}"
          echo "Tag: ${{ steps.current-version.outputs.tag }}"
          echo "DMG: MacSSH-${{ steps.current-version.outputs.new_version }}.dmg"
