#!/usr/bin/env python3
"""
MacSSH Release Automation Script
–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ª–∏–∑–∞:
1. –û–±–Ω–æ–≤–ª—è–µ—Ç –≤–µ—Ä—Å–∏–∏ –≤–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö
2. –õ–æ–∫–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞
3. –°–æ–∑–¥–∞–Ω–∏–µ DMG
4. –ê–≤—Ç–æ–¥–µ–ø–ª–æ–π –Ω–∞ GitHub
"""

import os
import sys
import subprocess
import re
import time
import shutil
from pathlib import Path

class MacSSHReleaseAutomation:
    def __init__(self):
        self.project_root = Path.cwd()
        self.xcode_project = self.project_root / "MacSSH.xcodeproj" / "project.pbxproj"
        self.info_plist = self.project_root / "MacSSH" / "Info.plist"
        self.appcast_xml = self.project_root / "appcast.xml"
        
        # –¢–µ–∫—É—â–∏–µ –≤–µ—Ä—Å–∏–∏
        self.current_version = None
        self.current_build = None
        self.new_version = None
        self.new_build = None
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏"""
        timestamp = time.strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
    
    def run_command(self, command, check=True, capture_output=True):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        self.log(f"–í—ã–ø–æ–ª–Ω—è—é: {command}")
        try:
            result = subprocess.run(
                command, 
                shell=True, 
                check=check, 
                capture_output=capture_output,
                text=True,
                cwd=self.project_root
            )
            if capture_output and result.stdout:
                self.log(f"–í—ã–≤–æ–¥: {result.stdout.strip()}")
            return result
        except subprocess.CalledProcessError as e:
            self.log(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}", "ERROR")
            if e.stderr:
                self.log(f"Stderr: {e.stderr}", "ERROR")
            if not check:
                return e
            sys.exit(1)
    
    def get_current_versions(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –≤–µ—Ä—Å–∏–π –∏–∑ project.pbxproj"""
        self.log("–ü–æ–ª—É—á–∞—é —Ç–µ–∫—É—â–∏–µ –≤–µ—Ä—Å–∏–∏...")
        
        # –ß–∏—Ç–∞–µ–º project.pbxproj
        with open(self.xcode_project, 'r') as f:
            content = f.read()
        
        # –ò—â–µ–º MARKETING_VERSION
        version_match = re.search(r'MARKETING_VERSION = ([^;]+);', content)
        if not version_match:
            self.log("–ù–µ –Ω–∞–π–¥–µ–Ω MARKETING_VERSION –≤ project.pbxproj", "ERROR")
            sys.exit(1)
        
        self.current_version = version_match.group(1).strip()
        
        # –ò—â–µ–º CURRENT_PROJECT_VERSION
        build_match = re.search(r'CURRENT_PROJECT_VERSION = ([^;]+);', content)
        if not build_match:
            self.log("–ù–µ –Ω–∞–π–¥–µ–Ω CURRENT_PROJECT_VERSION –≤ project.pbxproj", "ERROR")
            sys.exit(1)
        
        self.current_build = build_match.group(1).strip()
        
        self.log(f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {self.current_version} (build {self.current_build})")
    
    def calculate_new_versions(self):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π"""
        self.log("–í—ã—á–∏—Å–ª—è—é –Ω–æ–≤—ã–µ –≤–µ—Ä—Å–∏–∏...")
        
        # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
        parts = self.current_version.split('.')
        if len(parts) != 3:
            self.log("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏", "ERROR")
            sys.exit(1)
        
        major, minor, patch = parts
        new_patch = int(patch) + 1
        self.new_version = f"{major}.{minor}.{new_patch}"
        self.new_build = str(int(self.current_build) + 1)
        
        self.log(f"–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: {self.new_version} (build {self.new_build})")
    
    def update_project_pbxproj(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π –≤ project.pbxproj"""
        self.log("–û–±–Ω–æ–≤–ª—è—é project.pbxproj...")
        
        with open(self.xcode_project, 'r') as f:
            content = f.read()
        
        # –ó–∞–º–µ–Ω—è–µ–º –≤–µ—Ä—Å–∏–∏
        content = re.sub(
            f'MARKETING_VERSION = {self.current_version};',
            f'MARKETING_VERSION = {self.new_version};',
            content
        )
        
        content = re.sub(
            f'CURRENT_PROJECT_VERSION = {self.current_build};',
            f'CURRENT_PROJECT_VERSION = {self.new_build};',
            content
        )
        
        with open(self.xcode_project, 'w') as f:
            f.write(content)
        
        self.log("project.pbxproj –æ–±–Ω–æ–≤–ª–µ–Ω")
    
    def update_info_plist(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –≤ Info.plist"""
        self.log("–û–±–Ω–æ–≤–ª—è—é Info.plist...")
        
        with open(self.info_plist, 'r') as f:
            content = f.read()
        
        # –ó–∞–º–µ–Ω—è–µ–º CFBundleShortVersionString
        content = re.sub(
            f'<string>{self.current_version}</string>',
            f'<string>{self.new_version}</string>',
            content
        )
        
        # –ó–∞–º–µ–Ω—è–µ–º CFBundleVersion
        content = re.sub(
            f'<key>CFBundleVersion</key>\\s*<string>{self.current_build}</string>',
            f'<key>CFBundleVersion</key>\\n\\t<string>{self.new_build}</string>',
            content
        )
        
        with open(self.info_plist, 'w') as f:
            f.write(content)
        
        self.log("Info.plist –æ–±–Ω–æ–≤–ª–µ–Ω")
    
    def update_appcast_xml(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ appcast.xml"""
        self.log("–û–±–Ω–æ–≤–ª—è—é appcast.xml...")
        
        dmg_name = f"MacSSH-{self.new_version}.dmg"
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º update_appcast.sh
        self.run_command(f"./update_appcast.sh {self.new_version} {self.new_build} {dmg_name}")
        
        self.log("appcast.xml –æ–±–Ω–æ–≤–ª–µ–Ω")
    
    def local_build(self):
        """–õ–æ–∫–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        self.log("–ù–∞—á–∏–Ω–∞—é –ª–æ–∫–∞–ª—å–Ω—É—é —Å–±–æ—Ä–∫—É...")
        
        # –û—á–∏—Å—Ç–∫–∞ –∏ —Å–±–æ—Ä–∫–∞
        self.run_command(
            "xcodebuild -project MacSSH.xcodeproj -scheme MacSSH -configuration Release clean build"
        )
        
        self.log("–õ–æ–∫–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    
    def create_dmg(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ DMG —Ñ–∞–π–ª–∞"""
        self.log("–°–æ–∑–¥–∞—é DMG —Ñ–∞–π–ª...")
        
        dmg_name = f"MacSSH-{self.new_version}.dmg"
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—É—Ç—å –∫ —Å–æ–±—Ä–∞–Ω–Ω–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
        result = self.run_command(
            "find ~/Library/Developer/Xcode/DerivedData -name 'MacSSH.app' -type d | head -1",
            capture_output=True
        )
        
        if not result.stdout.strip():
            self.log("–ù–µ –Ω–∞–π–¥–µ–Ω MacSSH.app –ø–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏", "ERROR")
            sys.exit(1)
        
        app_path = Path(result.stdout.strip())
        build_dir = app_path.parent
        
        # –°–æ–∑–¥–∞–µ–º DMG
        self.run_command(
            f"create-dmg --volname 'MacSSH Installer' --window-pos 200 120 --window-size 800 400 "
            f"--icon-size 100 --icon 'MacSSH.app' 200 190 --hide-extension 'MacSSH.app' "
            f"--app-drop-link 600 185 '{dmg_name}' '{build_dir}'"
        )
        
        self.log(f"DMG —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {dmg_name}")
        return dmg_name
    
    def commit_and_push(self):
        """–ö–æ–º–º–∏—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        self.log("–ö–æ–º–º–∏—á—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é –∏–∑–º–µ–Ω–µ–Ω–∏—è...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
        self.run_command("git add MacSSH.xcodeproj/project.pbxproj MacSSH/Info.plist appcast.xml")
        
        # –ö–æ–º–º–∏—Ç
        self.run_command(f'git commit -m "Update version to {self.new_version} for release"')
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ (–∑–∞–ø—É—Å—Ç–∏—Ç –∞–≤—Ç–æ–¥–µ–ø–ª–æ–π)
        self.run_command("git push origin main")
        
        self.log("–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –∞–≤—Ç–æ–¥–µ–ø–ª–æ–π –∑–∞–ø—É—â–µ–Ω")
    
    def wait_for_autodeploy(self):
        """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ–¥–µ–ø–ª–æ—è"""
        self.log("–û–∂–∏–¥–∞—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ–¥–µ–ø–ª–æ—è...")
        self.log("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ GitHub Actions: https://github.com/Solvetronix/MacSSH/actions")
        self.log("–ù–∞–∂–º–∏—Ç–µ Enter –∫–æ–≥–¥–∞ –∞–≤—Ç–æ–¥–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è...")
        input()
    
    def upload_dmg_to_release(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ DMG –≤ GitHub Release"""
        self.log("–ó–∞–≥—Ä—É–∂–∞—é DMG –≤ GitHub Release...")
        
        dmg_name = f"MacSSH-{self.new_version}.dmg"
        
        if not os.path.exists(dmg_name):
            self.log(f"DMG —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {dmg_name}", "ERROR")
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–ª–∏–∑
        self.run_command(f"gh release upload latest {dmg_name}")
        
        self.log(f"DMG –∑–∞–≥—Ä—É–∂–µ–Ω –≤ —Ä–µ–ª–∏–∑: {dmg_name}")
    
    def run_full_release(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–ª–∏–∑–∞"""
        self.log("üöÄ –ù–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–ª–∏–∑ MacSSH")
        self.log("=" * 50)
        
        try:
            # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –≤–µ—Ä—Å–∏–π
            self.get_current_versions()
            
            # 2. –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π
            self.calculate_new_versions()
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            print(f"\nüìã –ü–ª–∞–Ω —Ä–µ–ª–∏–∑–∞:")
            print(f"   –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {self.current_version} (build {self.current_build})")
            print(f"   –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: {self.new_version} (build {self.new_build})")
            print(f"   DMG —Ñ–∞–π–ª: MacSSH-{self.new_version}.dmg")
            
            confirm = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ").strip().lower()
            if confirm != 'y':
                self.log("–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return
            
            # 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π
            self.log("\nüìù –®–∞–≥ 1: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π")
            self.update_project_pbxproj()
            self.update_info_plist()
            self.update_appcast_xml()
            
            # 4. –õ–æ–∫–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞
            self.log("\nüî® –®–∞–≥ 2: –õ–æ–∫–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞")
            self.local_build()
            
            # 5. –°–æ–∑–¥–∞–Ω–∏–µ DMG
            self.log("\nüì¶ –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ DMG")
            dmg_name = self.create_dmg()
            
            # 6. –ö–æ–º–º–∏—Ç –∏ –∞–≤—Ç–æ–¥–µ–ø–ª–æ–π
            self.log("\nüöÄ –®–∞–≥ 4: –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–¥–µ–ø–ª–æ—è")
            self.commit_and_push()
            
            # 7. –û–∂–∏–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–¥–µ–ø–ª–æ—è
            self.log("\n‚è≥ –®–∞–≥ 5: –û–∂–∏–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–¥–µ–ø–ª–æ—è")
            self.wait_for_autodeploy()
            
            # 8. –ó–∞–≥—Ä—É–∑–∫–∞ DMG
            self.log("\nüì§ –®–∞–≥ 6: –ó–∞–≥—Ä—É–∑–∫–∞ DMG –≤ —Ä–µ–ª–∏–∑")
            self.upload_dmg_to_release()
            
            self.log("\n‚úÖ –†–µ–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            self.log(f"üéâ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è {self.new_version} –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ GitHub")
            
        except KeyboardInterrupt:
            self.log("–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", "WARNING")
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞: {e}", "ERROR")
            sys.exit(1)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) > 1 and sys.argv[1] == "--help":
        print("""
MacSSH Release Automation Script

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python3 release_automation.py

–ß—Ç–æ –¥–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç:
1. –û–±–Ω–æ–≤–ª—è–µ—Ç –≤–µ—Ä—Å–∏–∏ –≤–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö (project.pbxproj, Info.plist, appcast.xml)
2. –í—ã–ø–æ–ª–Ω—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é —Å–±–æ—Ä–∫—É –ø—Ä–æ–µ–∫—Ç–∞
3. –°–æ–∑–¥–∞–µ—Ç DMG —Ñ–∞–π–ª
4. –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–¥–µ–ø–ª–æ–π –Ω–∞ GitHub
5. –ó–∞–≥—Ä—É–∂–∞–µ—Ç DMG –≤ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ä–µ–ª–∏–∑

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- Python 3.6+
- Xcode
- create-dmg (brew install create-dmg)
- GitHub CLI (gh)
- Git
        """)
        return
    
    automation = MacSSHReleaseAutomation()
    automation.run_full_release()

if __name__ == "__main__":
    main()
