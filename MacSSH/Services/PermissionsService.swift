import Foundation
import AppKit
import Security

class PermissionsService {
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ Full Disk Access
    static func checkFullDiskAccess() -> Bool {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SSH –∫–æ–º–∞–Ω–¥ –Ω–∞–ø—Ä—è–º—É—é
        let sshWorks = canExecuteSSHCommands()
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç—É—é –∫–æ–º–∞–Ω–¥—É
        let simpleCommandWorks = canExecuteExternalCommands()
        
        // –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –µ—Å—Ç—å
        return sshWorks || simpleCommandWorks
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SSH –∫–æ–º–∞–Ω–¥
    private static func canExecuteSSHCommands() -> Bool {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º ssh-keyscan - —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –∫–æ—Ç–æ—Ä—É—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        let process = Process()
        process.executableURL = URL(fileURLWithPath: "/usr/bin/ssh-keyscan")
        process.arguments = ["-v"] // Verbose mode –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
        let pipe = Pipe()
        process.standardOutput = pipe
        process.standardError = pipe
        
        do {
            try process.run()
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
            let group = DispatchGroup()
            group.enter()
            
            DispatchQueue.global().async {
                process.waitUntilExit()
                group.leave()
            }
            
            // –ñ–¥–µ–º –º–∞–∫—Å–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥—ã
            let result = group.wait(timeout: .now() + 3)
            
            if result == .timedOut {
                // –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–∏—Å, —É–±–∏–≤–∞–µ–º –µ–≥–æ
                process.terminate()
                return false
            }
            
            // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ (exit code 0 –∏–ª–∏ 1 –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏), –∑–Ω–∞—á–∏—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –µ—Å—Ç—å
            return process.terminationStatus == 0 || process.terminationStatus == 1
        } catch {
            // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π, –∑–Ω–∞—á–∏—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–µ—Ç
            return false
        }
    }
    
    /// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ Full Disk Access
    static func requestFullDiskAccess() {
        let alert = NSAlert()
        alert.messageText = "Full Disk Access Required"
        alert.informativeText = "MacSSH needs Full Disk Access to execute SSH commands and access system tools. Please grant this permission in System Settings."
        alert.alertStyle = .warning
        alert.addButton(withTitle: "Open System Settings")
        alert.addButton(withTitle: "Cancel")
        
        if alert.runModal() == .alertFirstButtonReturn {
            openSystemPreferences()
        }
    }
    
    /// –û—Ç–∫—Ä—ã–≤–∞–µ—Ç System Settings –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ Privacy & Security
    private static func openSystemPreferences() {
        let script = """
        tell application "System Settings"
            activate
            set current pane to pane id "com.apple.settings.PrivacySecurity"
        end tell
        """
        
        let process = Process()
        process.executableURL = URL(fileURLWithPath: "/usr/bin/osascript")
        process.arguments = ["-e", script]
        
        do {
            try process.run()
        } catch {
            // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π macOS
            let fallbackScript = """
            tell application "System Preferences"
                activate
                set current pane to pane id "com.apple.preference.security"
            end tell
            """
            
            let fallbackProcess = Process()
            fallbackProcess.executableURL = URL(fileURLWithPath: "/usr/bin/osascript")
            fallbackProcess.arguments = ["-e", fallbackScript]
            
            do {
                try fallbackProcess.run()
            } catch {
                print("Failed to open System Settings/Preferences: \(error)")
            }
        }
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    static func checkAllPermissions() -> [String] {
        var results: [String] = []
        
        results.append("=== System Permissions ===")
        
        let fullDiskAccess = checkFullDiskAccess()
        results.append(fullDiskAccess ? "‚úÖ Full Disk Access: Granted" : "‚ùå Full Disk Access: Not granted")
        
        if !fullDiskAccess {
            results.append("‚ö†Ô∏è Full Disk Access is required for SSH operations")
        }
        
        return results
    }
    
    /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    static func forceCheckPermissions() -> Bool {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º SSH –∫–æ–º–∞–Ω–¥—ã
        let sshWorks = canExecuteSSHCommands()
        let simpleWorks = canExecuteExternalCommands()
        let canExecute = sshWorks || simpleWorks
        
        print("üîç Permissions Debug:")
        print("  - SSH commands work: \(sshWorks)")
        print("  - Simple commands work: \(simpleWorks)")
        print("  - Overall result: \(canExecute)")
        
        // –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –µ—Å—Ç—å, –Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—Å–µ –µ—â–µ –¥—É–º–∞–µ—Ç —á—Ç–æ –∏—Ö –Ω–µ—Ç,
        // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à UserDefaults
        if canExecute {
            UserDefaults.standard.removeObject(forKey: "hasShownPermissionsWarning")
            UserDefaults.standard.removeObject(forKey: "hasDeclinedPermissionsWarning")
            print("  - Cleared UserDefaults cache")
        }
        
        return canExecute
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –≤–Ω–µ—à–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    static func canExecuteExternalCommands() -> Bool {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã
        let process = Process()
        process.executableURL = URL(fileURLWithPath: "/bin/echo")
        process.arguments = ["test"]
        
        let pipe = Pipe()
        process.standardOutput = pipe
        process.standardError = pipe
        
        do {
            try process.run()
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
            let group = DispatchGroup()
            group.enter()
            
            DispatchQueue.global().async {
                process.waitUntilExit()
                group.leave()
            }
            
            // –ñ–¥–µ–º –º–∞–∫—Å–∏–º—É–º 2 —Å–µ–∫—É–Ω–¥—ã
            let result = group.wait(timeout: .now() + 2)
            
            if result == .timedOut {
                // –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–∏—Å, —É–±–∏–≤–∞–µ–º –µ–≥–æ
                process.terminate()
                return false
            }
            
            return process.terminationStatus == 0
        } catch {
            return false
        }
    }
}
